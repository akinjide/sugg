#!/usr/bin/env node

var app = require('../index');
var cluster = require('cluster');
var http = require('http');
var debug = require('debug')('sugg:server');
var config = require('../config/config');

var port = normalizePort(process.env.PORT || config.port);
app.set('port', port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);

// scale-up application
if (cluster.isMaster) {
  var numWorkers = require('os').cpus().length;
  console.log('Master cluster setting up ' + numWorkers + ' workers...');

  app.sugg.keepAlive();

  for (let i = 0; i < numWorkers; i++) {
    cluster.fork();
  }
} else {
  // Listen on provided port, on all network interfaces.
  // Cook up server
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

// Event listener for HTTP server "error" event.
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch(error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log('process.cwd = ' + process.cwd() +
    '\nMEMORY HeapT=' + process.memoryUsage().heapTotal +
    '\nMEMORY HeapU=' + process.memoryUsage().heapUsed +
    '\nPID=' + process.pid +
    '\nPLATFORM=' + process.platform+
    '\nPORT=' + app.get('port'));
}

cluster.on('exit', (worker) => {
  console.log('mayday! mayday! worker', worker.id, ' is no more!');
  cluster.fork();
});
